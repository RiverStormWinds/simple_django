
-----------------------------------------------------django项目流程：-------------------------------------------------------

django创建项目： python manage.py startapp booktest

1. 设计模型(models)：

    from django.db import models

    class BookInfo(models.Model):
        btitle = models.CharField(max_length=20)

        def __str__(self):
            return '图书名称： {}, 发布时间： {}'
            .format(self.btitle, self.bpub_data.strftime('%Y-%m-%d'))

    class HeroInfo(models.Model):
        hname = models.CharField(max_length=20)
        hgender = models.BooleanField()
        hcontent = models.CharField(max_length=100)
        hBook = models.ForeignKey('BookInfo')

        def gender(self):
            if self.hgender:
                return '男'
            else:
                return '女'

        def __str__(self):

            return '英雄姓名： {}, 英雄性别： {}, 英雄简介： {}, 关联关系： {}'\
            .format(self.hname, self.gender(), self.hcontent, self.hBook)

    外键约束一旦建立，便会在一端生成一个用以访问多端的heroinfo_set表，
    可以用以访问多端：BookInfo.objects.all().first().heroinfo_set.all()，第一个一端数据访问自身对应的多端数据

2. 配置路由表，指导数据转发
    from django.urls import path, re_path
    from booktest import views

    urlpatterns = [
        re_path(r'^$', views.index),
        path('detail/<int:id>', views.detail)
    ]

3. 操作views（控制器）
    def index(request):
    return render(request, 'booktest/index.html', {'booklist': BookInfo.objects.all()})
    # 通过BookInfo.objects.all()传入数据库中的值

4. templates前端页面
    <h3>{{ book.btitle }}</h3>
    <ul>
        {% for hero in book.heroinfo_set.all %}
            <li>
                {{ hero.hname }} -- {{ hero.hcontent }}
            </li>
        {% endfor %}
    </ul>

5. 至此一个简单的django项目就已经完成了


-----------------------------------------------------ORM简介：-------------------------------------------------------

1. MVC框架中包括一个重要的部分，就是ORM: 对象(Object)-关系(Relational)-映射(Mapping)
    它实现了数据模型与数据库的解耦，即数据模型的设计不需要依赖于特定的数据库，
    通过简单的配置就可以轻松更换数据库
    a. 简单实现：
        在init.py文件中
        import pymysql
        pymysql.install_as_MySQLdb()

2. django对象增删查询 --> orm： 将django操作转换为特定的数据库语言 --> 对数据库进行操作

    models中简单的字段类型
    AutoField: 一个根据实际ID自动增长的IntegerField，通常不指定，如果不指定，一个主键字段自动添加到模型中

    BooleanField： true/false字段，此字段的默认表单控制是 CheckboxInput

    NullBooleanField： 支持null, true, false三种值

    CharField(max_length=字符长度): 字符串，默认的表单样式是TextInput

    TextField：大文本字段，一般超过4000时使用，默认的表单控件是Textarea

    IntegerField: 整数

    DecimalField(max_digits=None, decimal_places=None): 使用python的Decimal实例表示的浮点数
        DecimalField.max_digits: 位数总数
        DecimalField.decimal_places: 小数点后的数字位数

    FloatField: 用Python的float实例来表示的浮点数

    DateField[auto_now=False, auto_now_add=False]): 使用python的datetime.date实例表示的日期：
        参数DateField.auto_now：每次保存对象时，自动设置该字段为当前时间，用于'最后一次修改'的时间戳，
            它总是使用当前日期，默认为False
        参数DateField.auto_now_add: 当对象第一次被创建时自动设置当前时间，用于创建的时间戳，
            它总是使用当前日期，默认为false
        该字段默认对应的表单控件是一个TextInput. 在管理员站点添加了一个JavaScript写的日历控件，
            和一个“Today"的快捷按钮，包含了一个额外的invalid_date错误消息键

    TimeField: 使用Python和datetime.time实例表示的时间，参数同DateField
    DateTimeField: 使用Python的datetime.datetime实例表示的日期和时间，参数同DateField
    FileField: 一个上传文件的字段
    ImageField: 集成了FileField的所有属性和方法，但对上传的对象进行验证，确保它是个有效的image

3. 字段选项
    a. 通过字段选项，可以实现字段的约束
    b. 在字段对象时通过关键字参数指定
    c. null：如果为True, Django将空值以null存储到数据库中，默认值是False
    d. blank: 如果为True，则该字段允许为空白，默认值是False
    e. 对比： null是数据库范畴的概念，blank是表单验证范畴的
    f. db_column： 字段的名称，如果未指定，则使用属性的名称
    g. db_index： 若值为True，则在表中会为此字段创建索引
    h. default： 默认值
    i. primary_key： 若为True，则该字段会成为模型的主键字段
    j. unique： 如果为True，这个字段在表中必须有唯一值

4. 数据关系
    a. FroeignKey: 一对多， 将字段定义在多端
        hBook = models.ForeignKey(BookInfo, on_delete=models.SET_NULL, null=True)
        多端字段        外键        一端表名，       级联删除置空             可为空

        可用于维护递归的关联关系，使用'self'指定
        用于一访问多： 对象.模型类小写_set
            BookInfo.heroinfo_set

        从一端查询多端匹配的全部数据
            b = BookInfo.objects.get(id=1)  # 找到天龙八部
            b.heroinfo_set.all()    # 找到天龙八部所有出现的人物
            <QuerySet [<HeroInfo: 英雄姓名： 王语嫣, 英雄性别： 女,
            英雄简介： 王语嫣自幼倾心、痴情于表哥慕容复，把一片芳心都托付给了他。,
            关联关系： 图书名称： 天龙八部, 发布时间： 1992-06-02, bread： 0, bcomment： 0>


    b. 一对一访问： OneToOneField，将字段定义在任意一端
        heroinfo.bookinfo

    c. 多对多访问： ManyToMangField，将字段定义在两端中
        heroinfo.book_id

5. 元选项
    a. 在模型类中定义类Meta，用于设置元信息
        元信息db_table：定义数据表名称，推荐使用小写字母，数据表的默认名称

    b. ordering: 对象的默认排序字段，获取对象的列表时使用，接受属性构成的列表

        class BookInfo(models.Model):
            ......
            class Meta():
                ordering = ['id']  # 以id的升序进行排序

    c. 字符串前加'-'号表示倒序，不加'-'表示升序

        class BookInfo(models.Model):
            ......
            class Meta():
                ordering = ['-id']  # 以id的降序进行排序

    d. 排序会增加数据库开销

6. 重构类对象管理类
   a.   class BookInfoManager(models.Manager):
            def get_queryset(self):  数据库对象查询类
            def create_book(self, title, pub_date):  数据库对象创建类
            # 应该还有一个删除类，但是没有找到，等之后过来补上
        删除类方法： 数据不会被删除，只是把数据的isDelete字段置为False
        查询类方法： 在数据库中查找isDelete字段为True的数据


-----------------------------------------------------数据库简单操作：-------------------------------------------------------

1. 简单定义
    a. 在管理器上调用过滤器方法会返回查询集合
    b. 查询集合经过过滤器筛选后返回新的查询集合，因此可以写成链式过滤
    c. 惰性执行： 创建查询集合不会带来任何数据库的访问，直到调用数据时，才会访问数据库

2. 查询中简单的方法
    d. 过滤器： 也被称作返回查询集合的方法，也作过滤器
        all()   filter()    exclude()   order_by()  values(): 一个对象构成一个字典，整体然后作为列表返回

    注： filter(键1=值1, 值2=值2)  等价于  filter(键1=值1).fliter(值2=值2)

    e. 返回单个值方法： 过滤器返回一个集合，下面的方法返回单个值
        get()：返回单个满足条件的对象
            如果未找到，会引发'模型类.DoesNotExist'异常
            如果多条被返回，会引发'模型类.MultipleObjectsReturned'异常

        count()：返回当前查询的总条数
        first()：返回第一个对象
        last() ：返回最后一个对象
        exists()：判断查询集中是否有数据，如果有则返回True

    f. 限制查询集： 查询集合返回列表，可以使用下表的方式进行限制，等同于sql中的limit和offset子句
       如果获取一个对象，直接使用[0]，等同于[0:1].get()，但是如果没有数据，[0]引发IndexError异常，[0:1].get()引发DoesNotExist异常

3. 字段查询
    所用方法： filter(), exclude(), get()，使用where作为其过滤参数
    语法： 属性名称__比较运算符=值
    两个下划线，左侧是属性名称，右侧是比较类型
    对于外键，使用'属性名_id'表示外键的原始值
    使用%进行转义操作例如：filter(title__contains="%")=>where title like '%\%%'，表示查找标题中包含%的

    a. 比较运算符：
        exact：判断相等     filter(isDelete=False)
        contains：是否包含     exclude(btitle__contains='传')

        startwith, endswith：判断以value开头或结尾，exclude(btitle__endswith='传')
        isnull, isnotnull：判断是否为空，filter(btitle__isnull=False)

        i： 在运算符前面加上'i'表示不区分大小写，如iexact、icontains、istarswith、iendswith
        in：是否包含     filter(pk__in=[1, 2, 3, 4, 5])

        gt、gte、lt、lte：大于、大于等于、小于、小于等于     filter(id__gt=3)
        year、month、day、week_day、hour、minute、second：对日期间类型的属性进行运算
            filter(bpub_date__year=1980)
            filter(bpub_date__gt=date(1980, 12, 31))

        跨关联关系查询：处理join查询
            语法：模型类名<属性名><比较>
            注：可以没有__<比较>部分，表示相等，结果等同于inner join
            可返回使用，即在关联的两个模型中都可以使用
        filter(heroinfo__hcontent__contains='八')

        查询的快捷方式：pk，pk表示primary key，默认的主键是id
        filter(pk__lt=6)

    b. 聚合函数
        使用aggregate()函数返回聚合函数的值

            函数：Avg, Count, Max, Min, Sum

            from django.db.models import aggregates, Max, count, Avg

            maxDate = HeroInfo.aggregates(Max('bpub_date'))
            {'id__max': 27}  # 数据库最大id的英雄是27

            pubs = HeroInfo.heros.aggregate(id=Count('id'))
            {'id': 25}  # 数据库一个有25个英雄

            HeroInfo.heros.aggregate(Avg('id'))  # 求id平均值，并没有吊用。。。
            {'id__avg': Decimal('14.8400')}


4. F对象
    可以使用模型的字段A与字段B进行比较，如果A写在了等号的左边，则B出现在等号的右边，需要通过F对象构造
    BookInfo.books.filter(id__gte=F('bread')*2)  # 用自己的属性筛选自己。。。这就是F函数的所有内容
        下一题

5. Q对象
    过滤器的方法中关键字参数查询，会合并为And进行

    需要进行or查询，使用Q()对象

    Q对象(django.db.models.Q)用于封装一组关键字参数，这些关键字参数与“比较运算符”中的相同

    from django.db.models import Q

    list.filter(Q(pk_ _lt=6))

    Q对象可以使用&（and）、|（or）操作符组合起来
    当操作符应用在两个Q对象时，会产生一个新的Q对象

    list.filter(pk_ _lt=6).filter(bcommet_ _gt=10)
    list.filter(Q(pk_ _lt=6) | Q(bcommet_ _gt=10))

    使用~（not）操作符在Q对象前表示取反
    list.filter(~Q(pk__lt=6))

    可以使用&|~结合括号进行分组，构造做生意复杂的Q对象
    过滤器函数可以传递一个或多个Q对象作为位置参数，如果有多个Q对象，这些参数的逻辑为and
    过滤器函数可以混合使用Q对象和关键字参数，所有参数都将and在一起，Q对象必须位于关键字参数的前面


6. 自连接
    当一张表中数据需要自身与自身的数据进行操作时，会用到自连接


-----------------------------------------------------视图views：-------------------------------------------------------

1. 视图定义：
    a. 视图接受Web请求，并且返回Web响应
    b. 视图就是一个python函数，被定义在views.py中
    c. 响应可以是一张网页的HTML内容，一个重定向，一个404错误
    d. 响应处理过程

    用户浏览器输入网址 -->  django获取地址信息，去除域名和端口部分 -->  匹配url路由，一旦成功，记录下来请求方法和请求名称
    -->  接收request和正则中接收到的值，处理并返回response

2. url配置：
    a. 请求的url被看做是一个普通的python字符串，进行匹配时不包括get或post请求的参数及域名
        http://www.itcast.cn/python/1/?i=1&p=new，只匹配“/python/1/”部分

        注：解决命名空间报错问题
        app_name = 'booktest'  # 将命名空间放在这里便解决了问题

    b. 正则表达式非命名组，通过位置参数传递给视图
        url(r'^([0-9]+)/$', views.detail, name='detail')

    c. 正则表达式命名组，通过关键字参数传递给视图，本例中关键字参数为id
        url(r'^(?P<id>[0-9]+)/$', views.detail, name='detail')
        re_path(r'^(?P<id>\d+)$', views.detail, name='detail'),
        re_path(r'^area/(?P<id>\d+)$', views.area, name='area'),

    d. 参数匹配规则：优先使用命名参数，如果没有命名参数，则使用位置参数
        每个捕获的参数都作为一个普通的python字符串传递给视图

    e. 包含其他的url：include
        在应用中创建urls.py文件，定义本应用中的urlconf，再在项目的settings中使用include()
        from django.conf.urls import include, url
        urlpatterns = [
                url(r'^', include('booktest.urls', namespace='booktest')),
                ]


    f. url反向解析
        如果在视图、模板中使用硬编码的链接，在urlconf发生改变时，维护是一件非常麻烦的事情
        解决：在做链接时，通过指向urlconf的名称，动态生成链接地址
        视图：使用django.core.urlresolvers.reverse()函数
        模板：使用url模板标签

-----------------------------------------------------正题：HttpRequest对象-------------------------------------------------------

1. 服务器接收到http协议的请求后，会根据报文创建HttpRequest对象
    视图函数的第一个参数是HttpRequest对象
    在django.http模块中定义了HttpRequest对象的API

2. Request对象的属性：

    def get_test1(request):

    return render(request, 'booktest/get_test1.html')

    request.path: 一个字符串，表示请求页面的完整路径，不包含域名

    request.method: 一个字符串，表示请求使用的HTTP方法，常用值为GET,POST

    request.encoding: 一个字符串，表示提交的数据的编码方式
        如果为None则表示浏览器的默认设置，一般为utf-8
        这个属性为可写，可以通过修改它来修改访问表单数据使用的编码

    request.GET: 一个类似于字典的对象，包含GET请求方式的所有参数
    request.POST: 一个类似于字典的对象，包含POST请求方式的所有参数
    request.FILE: 一个类似于字典的对象，包含所有上传的文件
    request.COOKIES: 一个标准的Python字典，包含所有的cookie，键和值都为字符串
    request.session: 一个即可读又可写的字典对象，表示当前会话，只有当Django启用会话时才可用
    request.is_ajax(): 如果请求是通过XMLHttpRequest发起的，则返回True

3. QueryDict对象
    定义在django.http.QueryDict
    request对象属性GET，POST都是QueryDict类型的对象
    与python字典不同，QueryDict类型的对象用来处理同一个键带多个值的方法

    方法get(): 根据键获取值
        只能获取键的一个值
        如果一个键同时拥有多个值，获取最后一个值
        dict.get('键', default)

    方法getlist(): 根据键获取值
        将键的值以列表返回，可以获取一个键的多个值
        dict.getlist('键', default)

4. HttpResponse对象
    在django.http模块中定义了HttpResponse对象的API
    HttpRequest对象由Django自动创建，HttpResponse对象由程序员创建
    不用调用模板，直接返回数据

    HttpResponse对象调用模板
        def index(request):
            t1 = loader.get_template('polls/index.html')
            context = RequestContext(request, {'h1': 'hello'})
            return HttpResponse(t1.render(context))

    属性：
        content: 表示返回的内容，字符串类型
        charset: 表示response采用的编码字符集，字符串类型
        status_code: 响应的HTTP响应状态码
        content-type: 指定输出的MIME类型

    方法：
        init: 使用页内容实例化HttpResponse对象
        write: 以文件的方式写
        flush(): 以文件方式输出缓存区
        set_cookie(key, value='', max_age=None, expires=None): 设置Cookie
            key，value都是字符串类型
            max_age是一个整数，表示指定秒数后过期
            如果不指定过期时间，一般两个星期后过期

    from django.http import HttpResponse
    from datetime import *

    def index(request):
        response = HttpResponse()
        if request.COOKIES.has_key('h1'):
            response.write('<h1>' + request.COOKIES['h1'] + '</h1>')
        response.set_cookie('h1', '你好', 120)
        # response.set_cookie('h1', '你好', None, datetime(2016, 10, 31))
        return response

    delete_cookie(key): 删除指定的key的Cookie，如果key不存在，则什么也不发生


5. 子类HttpResponseRedirect
    重定向，服务器端跳转
    构造函数的第一个参数用来指定重定向地址

    from django.http import HttpResponse,HttpResponseRedirect
    def index(request):
        return HttpResponseRedirect('js/')
    def index2(request,id):
        return HttpResponse(id)

6. JsonResponse子类
    返回json数据，一般用于ajax异步请求
    __init__(data)
    帮助用户创建JSON编码的响应
    参数data是字典对象
    JsonResponse的默认Content-Type为application/json
    from django.http import JsonResponse

    def index2(requeset):
        return JsonResponse({'list': 'abc'})

7. render简写函数
    render(request, template_name, [context])
    结合一个给定的模板和一个给定的上下文字典，并返回一个渲染后的HttpResponse对象
    request：该request用于生成response
    template_name：要使用的模板的完整名称
    context：添加到模板上下文的一个字典，视图将在渲染模板之前调用它

8. 重定向
    redirect(to)
    为传递进来的参数返回HttpResponseRedirect
    to推荐使用反向解析

9. 得到数据或返回404
    def detail(request, id):
        try:
            book = get_object_or_404(BookInfo, pk=id)
        except BookInfo.MultipleObjectsReturned:
            book = None
        return render(request, 'booktest/detail.html', {'book': book})

-----------------------------------------------------session和cookie-------------------------------------------------------

1. 状态保持，http是无状态协议：每次请求都是一次新的请求，不会记得之前通信的状态
    a. 客户端与服务器通信一次，就是一次会话
    b. 实现状态保持的方式： 在客户端或服务器存储与会话有关的数据
    c. 存储方式： cookie，session
    d. 客户端中cookie存储session_id
    e. 状态保持的目的是在一段时间内跟踪请求者的状态，可以实现跨页面访问当前请求者的数据
    f. 不同请求者之间不会共享session，cookie，与请求者一一对应

2. 启用session
    a. 使用django-admin startproject创建的项目默认启用
    b. 在settings.py文件中

    # 默认已经有了
    向INSTALLED_APPS列表中添加：
    'django.contrib.sessions',

    项MIDDLEWARE_CLASSES列表中添加：
    'django.contrib.sessions.middleware.SessionMiddleware',

3. session使用
    启用会话后，每个HttpRequest对象将具有一个session属性，它是一个类字典对象
    get(key, default=None): 根据键获取会话的值
    clear(): 清除当前会话
    flush(): 删除当前的会话数据并删除会话的Cookie
    del request.session['member_id']: 删除会话

4. session存储
    使用存储会话的方式，可以使用settings.py的SESSION_ENGINE项指定

    def login(request):
    return render(request, 'booktest/login.html')

    def home(request):
        uname = request.session.get('uname')
        return render(request, 'booktest/home.html', {'uname': uname})

    def login_handle(request):
        if request.method == 'GET':
            print('---------------------')
        else:
            print('+++++')
            # resp = redirect('user/home')
            request.session['uname'] = request.POST['uname']
            # return redirect(reversed('user:home'))
            return redirect('/user/home')

    def logout(request):
        # request.session['uname'] = None
        # del request.session['uname']
        # request.session.clear()
        request.session.flush()
        return redirect('/user/home')

-----------------------------------------------------模板介绍-------------------------------------------------------

1. 模板概念，模板的设计实现了业务逻辑(view)与显示内容(template)的分离，一个试图可以使用任意一个模板，一个模板也可以供多个视图使用
    模板包含：HTML的静态部分，动态插入内容部分

    由startproject命令生成的settings.py定义关于模板的值：
        DIRS定义了一个目录列表，模板引擎按照列表顺序搜索这些目录以查找模板源文件
        APP_DIRS告诉模板引擎是否应该在每个已安装的应用中查找模板

        常用方式：在项目的根目录下创建templates目录，设置DIRS值

2. 模板语言包括
    变量
    标签 { % 代码块 % }
    过滤器
    注释{# 代码或html #}

3. 当模板引擎遇到一个变量，将计算这个变量，然后将结果输出
    变量名必须由字母，下划线，和点组成
    1. 字典查询，例如：foo['bar']
    2. 属性或方法查询， 例如：foo.bar
    3. 数字索引查询， 例如： foo.[bar]

    如果变量不存在，模板系统将插入空字符串''
    模板中调用方法时不能传递参数

4. 在模板中调用对象的方法
    在models.py中定义类HeroInfo
    from django.db import models

    class HeroInfo(models.Model):
        ...
        def showName(self):
            return self.hname

    在html模板语言中，可以调用showName函数进行self.hanem输出

5. 模板语法：
    语法：{ % tag % }
    作用：在输出中创建文本
    控制循环或逻辑，加载外部信息到模板中供以后的变量使用

    for标签
    { %for ... in ...%}
    循环逻辑
    {{forloop.counter}}表示当前是第几次循环
    { %empty%}
    给出的列表为空或列表不存在时，执行此处
    { %endfor%}

    if标签
    { %if ...%}
    逻辑1
    { %elif ...%}
    逻辑2
    { %else%}
    逻辑3
    { %endif%}

    comment标签
    { % comment % }
    多行注释
    { % endcomment % }

    include：加载模板并以标签内的参数渲染
    { %include "foo/bar.html" % }

    url：反向解析
    { % url 'name' p1 p2 %}

    csrf_token：这个标签用于跨站请求伪造保护
    { % csrf_token %}

6. 过滤器：
    语法： {{ 变量|过滤器 }}，例如{{ name|lower }}，表示将变量name的值变为小写输出
    使用管道符号(|)来应用过滤器
    通过使用过滤器来改变变量的计算结果
    可以在if标签中使用过滤器结合运算符
    if list1|length > 1
        ......

    过滤器能够被"串联"，构成过滤器链
    name|lower|upper

    过滤器可以传递参数，参数使用引号包起来
    list | join: ','

    奇偶行不同颜色：
        <ul>
        {% for book in booklist %}
            {% if forloop.counter|divisibleby:'2' %}
            <li style="background-color: red;">
                {% else %}
            <li style="background-color: blue;">
            {% endif %}
                <a href="{{ book.id }}">
                    {{ book.btitle }}
                    {#                {{ book.hero_name }}#}
                </a>
            </li>
        {% endfor %}
        </ul>

7. 模板继承
    模板继承可以减少页面内容的重复定义，实现页面内容的重用
    典型应用：网站的头部，尾部是一样的，这些内容可以定义在父模板中，不必进行重复定义
    block标签：在父模板中预留区域，在子模板中填充
    extends继承：继承，在模板文件第一行继承

    定义父模板base.html
    {% block block_name %}
    这里可以定义默认值
    如果不定义默认值，则表示空字符串
    {% endblock %}

    定义子模板index.html：从父模板base.html中继承
    {% extends 'base.html' %}

    在子模板中使用block填充预留区域
    {% block block_name %}
    实际填充内容
    {% endblock %}

    说明：
        如果在模板中使用extends标签，它必须是模板中第一个标签
        不能在一个模板中定义多个相同名字的block标签
        子模板不必定义全部父模板中的blocks，如果子模板中没有定义block，则使用了父模板中的默认值
        如果发现模板中大量的复制内容，那就应该把内容移动到父模板中，增加复用率
        使用可以获取父模板中的block的内容
        为了更好的可读性，可以个endblock标签一个名字

        {% block block_name %}
        区域内容
        {% endblock block_name %}


-----------------------------------------------------模板三层继承结构-------------------------------------------------------

三层继承结构使得代码最大程度的复用，并且使得添加内容更加简单
如下图为常见的电商页面
        首页                列表页                  用户页
    top                   top                    top
    main              推  列表                 用   某项用户操作
                      荐                      户
                      商                      导
                      品                      航

    bottom                bottom                 bottom


创建根级模板
    名称'base.html'
    存放整个站点公用的内容

    <html>
    <head>
        <title>{% block title %}{% endblock %} 水果超市</title>
    </head>

    <body>
    top -- {{ logo }}
    <hr/>
    {% block left %}{% endblock %}
    {% block content %}{% endblock %}
    <hr/>
    bottom
    </body>
    </html>

备注： 1. 根级模板解构： a. 头部block  -->  左部block  -->  内容block
        派生出的子模板： 用于展示商品列表： 继承头部block 和 左部block
                       用于用户中心模板： 继承头部block 和 左部block
                       用于商城首页模板： 继承头部block 和 内容block
                       定义商品列表模板： 继承内容block，其余不继承
                       用户密码页面模板： 继承内容block


2. html转义，就是将包含的html标签输出，而不被解释执行，原因是当显示用户提交字符串时，可能包含一些攻击性的代码，如js脚本
    Django会将如下字符自动转义：
    < 会转换为&lt;

    > 会转换为&gt;

    ' (单引号) 会转换为&#39;

    " (双引号)会转换为 &quot;

    & 会转换为 &amp;

3. CSRF: 全称Cross Site Request Forgery，跨站请求伪造
    某些恶意网站上包含链接、表单按钮或者JavaScript，它们会利用登录过的用户在浏览器中的认证信息试图在你的网站上完成某些操作，这就是跨站攻击
    演示csrf如下
    创建视图csrf1用于展示表单，csrf2用于接收post请求
    {% csrf_token %}: 在form表单中填写
    @csrf_exempt: 在函数开头进行装饰调用

4. 验证码视图
    需要模块： PIL中的 Image, ImageDraw, ImageFont模块。
    Image表示一个画布对象
    ImageDraw表示画笔对象
    ImageFont表示字体对象，ubuntu字体路径为/usr/share/fonts/truetype/freefont

    构造验证码过程：
        a. 导包 from PIL import Image, ImageDraw, ImageFont
        b. 创建画面，画笔，对象
            im = Image.new('RGB', (width, height), bgcolor)  # 画布对象
            draw = ImageDraw.Draw(im)  # 画笔对象

        c. 开始绘制噪点
        d. 生成4个验证码的值

        e. 创建字体对象 font = ImageFont.truetype('FreeMono.ttf', 23)
            构造字体颜色
            绘制4个字体

        f. 释放画笔
        g. 将验证码字体内容存入session，用于做进一步验证
            request.session['verifycode'] = rand_str

        h. 内存文件操作，将生成的验证码图片文件保存在内存中
            import cStringIO
            buf = cStringIO.StringIO()
            im.save(buf, 'png')
        i. 将内存中的图片数据返回给客户端,MIME类型为图片png
            return HttpResponse(buf.getvalue(), 'image/png')


-----------------------------------------------------配置静态文件-------------------------------------------------------

1. 配置静态文件路径：
    STATIC_URL = '/static/'
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static'),
    ]

    在项目根目录下创建static目录，再创建当前应用名称的目录
    mysite/static/myapp

    在模板中可以使用硬编码
    /static/my_app/myexample.jpg

    在模板中可以使用static编码: 相当于是反向url解码

    {% load static from staticfiles %}
    <img src="{% static 'my_app/myexample.jpg' %}" alt="My image"/>

2. 中间件
    a. 是一个轻量级，底层的插件系统，可以介入django的请求和相应处理过程，修改django的输入或输出
    b. 激活：添加到django配置文件中的MIDDLEWARE_CLASSES元组中
    c. 每个中间件组建是一个独立的Python类，可以定义下面方法中一个或多个
        __init__: 无需任何参数，服务器相应第一个请求的时候调用一次，用于确定是否启用当前中间件
        process_request(request): 执行视图之前被调用，在每个请求上调用，返回None或HttpResponse对象
        process_view(request, view_func, view_args, view_kwargs): 调用视图之前被调用，在每个请求上调用，返回None或
                    HttpResponse对象
        process_template_reponse(request, response): 在视图刚好执行完毕后被调用，返回实现了render方法
        process_response(request, response): 所有响应返回浏览器之前被调用，在每个请求上调用，返回HttpResponse对象
        process_exception(request, response, exception): 当视图抛出异常时调用，在每个请求上调用，返回一个HttpResponse对象

    d. 使用中间件，可以干扰整个处理过程，每次请求都会执行中间件的这个方法
    e. 事例：自定义异常处理
    f. 与settings.py同级目录下创建myexception.py文件，定义类MyException，实现process_exception方法
        from django.http import HttpResponse
        class MyException():
            def process_exception(request,response, exception):
                return HttpResponse(exception.message)

    g. 将类MyException注册到settings.py文件中
        MIDDLEWARE_CLASSES = (
        'test1.myexception.MyException',
        ...
        )

    h. 定义视图，并发生一个异常信息，则会运行自定义的异常处理

3. 上传图片
    当django在处理文件上传的时候，文件数据被保存在request.FILES
    FILES中的每个键为<input type='file' name=''>中的name
    注意：FILES只有在请求的方法为POST且提交<form>带有enctype='multipart/form-data' 的情况下才会包含数据，
        否则，FILES将为一个空的类似于字典的对象
    使用模型处理上传文件： 将属性定义成models.ImageField类型

    pic = models.ImageField(upload_to='cars/')

    注意： 如果属性类型为ImageField需要安装包pilow

    pip install Pillow = 3.4.1

4. 图片存储路径
    在项目根目录下创建media文件夹
    图片上传后，会被保存到"/static/media/cars"图片文件
    打开settings.py文件，增加media_root项

    MEDIA_ROOT = os.path.join(BASE_DIR, "static/media")\

    手动上传文件代码如下：
    <html>
    <head>
        <title>文件上传</title>
    </head>
    <body>
        <form method="post" action="upload/" enctype="multipart/form-data">
            <input type="text" name="title"><br>
            <input type="file" name="pic"/><br>
            <input type="submit" value="上传">
        </form>
    </body>
    </html>

    views.py手动上传代码：

    from django.conf import settings

    def upload(request):
        if request.method == "POST":
            f1 = request.FILES['pic']
            fname = '%s/cars/%s' % (settings.MEDIA_ROOT,f1.name)
            with open(fname, 'w') as pic:
                for c in f1.chunks():
                    pic.write(c)
            return HttpResponse("ok")
        else:
            return HttpResponse("error")


5. 分页器
    Paginator(列表, int): 返回分页对象，参数为列表数据，每面数据的条数
    属性：
        count: 对象总数
        num_pages: 页面总数
        page_range: 页码列表，从1开始，例如[1, 2, 3, 4]

    方法：
        page(num): 下表以1开始，如果提供的页码不存在，抛出InvalidPage异常

    异常exception
        InvalidPage: 当向page()传入一个无效的页码时抛出
        PageNotAnInteger: 当向page()传入一个不是整数的值时抛出
        EmptyPage: 当向page()提供一个有效值时抛出，但是页面上没有任何对象时抛出

6. Page对象
    创建对象：Paginator对象的page()方法返回Page对象，不需要手动构造

    属性：
        object_list: 当前页上所有对象的列表
        number: 当前页的序号，从1开始
        paginator: 当前page对象相关的Paginator对象

    方法：
        has_next(): 如果有下一页返回True
        has_previous(): 如果有上一页返回True
        has_other_pages(): 如果有上一页或下一页返回True
        next_page_number(): 返回下一页页码，如果下一页不存在，抛出InvalidPage异常
        previous_page_number(): 返回上一页的页码，如果上一页不存在，抛出InvalidPage异常
        len(): 返回当前页面对象的个数
        迭代页面对象: 访问当前页面中的每个对象

6. 分页器示例
    from django.core.paginator import Paginator

    def pagTest(request, pIndex):
        list1 = AreaInfo.objects.filter(aParent__isnull=True)
        p = Paginator(list1, 10)
        if pIndex == '':
            pIndex = '1'
        pIndex = int(pIndex)
        list2 = p.page(pIndex)
        plist = p.page_range
        return render(request, 'booktest/pagTest.html', {'list': list2, 'plist': plist, 'pIndex': pIndex})

    html页面代码：

        <!DOCTYPE html>
        <html>
        <head>
            <title></title>
        </head>
        <body>
        <ul>
        {%for area in list%}
        <li>{{area.id}}--{{area.atitle}}</li>
        {%endfor%}
        </ul>

        {%for pindex in plist%}
        {%if pIndex == pindex%}
        {{pindex}}&nbsp;&nbsp;
        {%else%}
        <a href="/pag{{pindex}}/">{{pindex}}</a>&nbsp;&nbsp;
        {%endif%}
        {%endfor%}
        </body>
        </html>

    分页器简单总结： 只要三点
            p = Paginator(list1, 10)

        1. 当前页码： p_index
            def pag_test(request, p_index):  # 从url参数列表传进来

        2. 每页显示内容对象数量列表：
            list = p.page(p_index)  # 当前页面显示内容条目

        3. 一共分多少页： plist
            plist = p.page_range

        前端接收
            <ul>
            {%for area in list%}
            <li>{{area.id}}--{{area.atitle}}</li>
            {%endfor%}
            </ul>
        #  这段代码是用来在页面上显示输出内容的


            {%for pindex in plist%}
            {%if pIndex == pindex%}
            {{pindex}}&nbsp;&nbsp;
            {%else%}
            <a href="/pag{{pindex}}/">{{pindex}}</a>&nbsp;&nbsp;
            {%endif%}
            {%endfor%}

        plist = 共分为多少页
        当前页面不需要a标签  # {{pindex}}&nbsp;&nbsp;
        其他页面需要加上a标签包裹  # <a href="/pag{{pindex}}/">{{pindex}}</a>&nbsp;&nbsp;
        并让路由指向urls的pag路由，重新定位到page_test函数


-----------------------------------------------------js和ajax-------------------------------------------------------

1. 使用视图通过上下文向模板传递数据，需要先夹在完成模板的静态页面，
    再执行模板代码，生成最终的html，返回给浏览器，这个过程将页面与数据继承到一起，扩展性差

    改进方案： 通过ajax的方式获取数据，通过dom操作将数据呈现到界面上
    推荐使用框架的ajax方法，不要使用xmlhttprequest对象，因为操作麻烦且不容易查错
    jquery框架中提供了$.ajax, $.get, $.post方法，用于进行异步交互
    由于csrf的约束，推荐使用$.get

    示例： 实现省市区的选择
    1. 静态编码部分：
        <select id="prov" onchange="chg(this.value)">
        <option id="prov_value" value="">省份</option>
        </select>

        <select id="city" onchange="chg_area(this.value)">
            <option value="">城市</option>
        </select>

        <select id="area">
            <option value="">区县</option>
        </select>

    2. ajax动态加载部分(通过url进行参数传递，用路由表跳转views函数处理ajax的异步加载请求)：
        <script>

        $(function () {
            $.get('/user/prov_ajax', function (data) {
                for (var i = 1; i < 35; i++) {
                    prov = $("#prov");
                    prov.append('<option value=' + data[i][0] + '>' + data[i][1] + '</option>');
                }
            });
        });

        function chg(data) {
            console.log(data);
            {#console.log('-----------------');#}
            $.get('/user/city_ajax/'+ data, function (datas) {
                city = $("#city");
                city.empty().append('<option value="">城市</option>');

                for (var dat in datas){
                    console.log(dat);
                    city.append('<option value=' + datas[dat][0] + '>' + datas[dat][1] + '</option>');
            }
            });
        }

    3. views函数处理部分：
        def prov_ajax(request):
            prov = {}
            provinces = ProvInfo.objects.all()
            for province in provinces:
                prov[province.id] = [province.provinceid, province.province]
            return JsonResponse(prov)


        def city_ajax(request, id):
            city = {}
            cities = ProvInfo.objects.filter(provinceid=id).first().cityinfo_set.all().values()
            # for cit in cities:
            #     print(cit.get('cityid'))
            # city[cit.id] = [cit.get('cityid'), cit.get.('city')]

            for i in range(len(cities)):
                city[i] = [cities[i].get('cityid'), cities[i].get('city')]
            return JsonResponse(city)


        def area_ajax(request, id):
            print(id)
            area = {}
            areas = CityInfo.objects.filter(cityid=id).first().areainfo_set.all().values()

            for i in range(len(areas)):
                area[i] = [areas[i].get('areaid'), areas[i].get('area')]
                print(area[i])
            return JsonResponse(area)

    4. 由后端传向前端一个{0: [object.id, object.value]}字典，前端接收以后，使用for (var dat in datas)来确定字典数据数量，
        取出后端的所有values，前端再将values列表中的所有属性进行输出打印即可


-----------------------------------------------------缓存-------------------------------------------------------

1. 缓存基本概念：
    a. 对于中等流量的网站来说，尽可能地减少开销是必要的，缓存数据就是为了保存那些需要很多计算资源的结果，这样的话就不必在下次重复消耗
    计算资源
    b. django自带了一个健壮的缓存系统来保存动态页面，避免对于每次请求都重新进行计算
    c. django提供了不同级别的缓存颗粒：可以缓存特定视图的输出，可以仅仅缓存那些很难生产出来的部分，或者可以缓存整个网站

2. 设置缓存
    a. 通过设置决定把数据缓存在哪里，是数据库中，文件系统还是在内存中
    b. 通过setting文件的CACHES配置来实现
    c. 参数TIMEOUT：缓存的默认过期时间以秒为单位，这个参数默认是300秒，即五分钟，
        设置TIMEOUT为None表示永远不会过期，值设置成0造成缓存立即失效

    CACHES = {
        'defautl': {
                'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
                'TIMEOUT': 60,
                }
        }

    可以将cache存到redis中，默认采用1数据库，需要安装包并配置如下
    安装包：pip install django-redis-cache
    CACHES = {
        'default': {
            'BACKEND': 'redis_cache.cache.RedisCache',
            'LOCATION': 'localhost:6379',
            'TIMEOUT': 60,
        },
    }

    # 终极版redis缓存
    CACHES = {
        'dbcache': {
            'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
            'LOCATION': 'blob_cache',
        },

        'filecache': {
            'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
            'LOCATION': 'd:/foo/bar',
        },

        'default':{

            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://127.0.0.1:6379/1",
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",


            }
        }

    }

    # 配置session 的数据放在cache中

    SESSION_ENGINE = "django.contrib.sessions.backends.cache"
    SESSION_CACHE_ALIAS = "default"

-----------------------------------------------------异步selery-------------------------------------------------------


























